#!/bin/bash -e
# This script is intended to be called by the buildpackages script
# However, it can be invoked alone and still function properly
# An example usage would be ./buildpip 2.0
# It needs as a command line argument with the version of the target distributable
# The version should be valid and a COMPSS_${COMPSS_VERSION}.tar.gz file must
# exist in the specified repository in pyCOMPSsResources/url file

COMPSS_VERSION=$1

# add the version number as a resource
echo $COMPSS_VERSION > COMPSsResources/VERSION.txt

# create distributable folder 
mkdir -p COMPSs

# copy scripts and other files into the pyCOMPSs directory
# please, resist the temptation to replace all these lines by
# cp -rf pyCOMPSsResources/* pyCOMPSs/ or something equivalent
# It may be possible that not all of the files in that folder are
# necessary or even appropriate for the installation
cp COMPSsResources/setup.py COMPSs/
cp COMPSsResources/compssenv COMPSs/
cp COMPSsResources/MANIFEST.in COMPSs/
cp COMPSsResources/VERSION.txt COMPSs/
cp COMPSsResources/url COMPSs/
cp COMPSsResources/backend.py COMPSs/
cp COMPSsResources/README.txt COMPSs/
cp COMPSsResources/LICENSE.txt COMPSs/

cd COMPSs

# Change permissions. This will avoid issues with, for example,
# python's subprocess.call
chmod -R 777 *
# Create the tar.gz distributable
# This should leave a .tar.gz in pyCOMPSs/dist
python setup.py sdist
cd ..

# finally, move the pyCOMPSs distributable to packages/pip (tgz included)
# first, delete previous versions (if any)
rm -rf ../../packages/pip
mkdir -p ../../packages/pip
# change permissions
chmod -R 777 COMPSs
# ...and move it to its final destination
mv COMPSs ../../packages/pip/

