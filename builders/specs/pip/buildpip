#!/bin/bash -e
# This script is intended to be called by the buildpackages script
# However, it can be invoked alone and still function properly
# An example usage would be ./buildpip 2.0
# It needs as a command line argument with the version of the target distributable
# The version should be valid and a COMPSS_${COMPSS_VERSION}.tar.gz file must
# exist in the specified repository in pyCOMPSsResources/url file

COMPSS_VERSION=$1

# add the version number as a resource
echo $COMPSS_VERSION > pyCOMPSsResources/VERSION.txt

# create distributable folder 
mkdir -p pyCOMPSs
# copy python binding to root folder
cp -rf ../../../compss/programming_model/bindings/python/* pyCOMPSs/
# copy scripts and other files into the pyCOMPSs directory
# please, resist the temptation to replace all these lines by
# cp -rf pyCOMPSsResources/* pyCOMPSs/ or something equivalent
# It may be possible that not all of the files in that folder are
# necessary or even appropriate for the installation
cp pyCOMPSsResources/setup.py pyCOMPSs/
cp pyCOMPSsResources/MANIFEST.in pyCOMPSs/
cp pyCOMPSsResources/VERSION.txt pyCOMPSs/
cp pyCOMPSsResources/url pyCOMPSs/
cp pyCOMPSsResources/backend.py pyCOMPSs/
cp pyCOMPSsResources/README.txt pyCOMPSs/
cp pyCOMPSsResources/LICENSE.txt pyCOMPSs/

cd pyCOMPSs

# Change permissions. This will avoid issues with, for example,
# python's subprocess.call
chmod -R 777 *
# Create the tar.gz distributable
# This should leave a .tar.gz in pyCOMPSs/dist
python setup.py sdist
cd ..

# finally, move the pyCOMPSs distributable to packages/pip (tgz included)
# first, delete previous versions (if any)
rm -rf ../../packages/pip
mkdir -p ../../packages/pip
# change permissions
chmod -R 777 pyCOMPSs
# ...and move it to its final destination
mv pyCOMPSs ../../packages/pip/

