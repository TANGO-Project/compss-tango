#!/bin/bash

  #---------------------------------------------------------------------------------------------------------------------
  # FIRST LEVEL FUNCTIONS
  #---------------------------------------------------------------------------------------------------------------------
  usage() {
    echo "***********************************************************"
    echo "  Usage: main_distribution <distribution>"
    echo "    - distribution : ubuntu | suse | debian | centos | sc"
    echo "***********************************************************"
  }

  display_error() {
    local errMsg=$1
    echo " "
    echo "ERROR: $errMsg"
    echo " "
  }

  clean() {
    # Clean test environment
    if [ "${cfgFile}" != "" ]; then
      # We must clean the test environment
      #rm -f ${cfgFile}
      rm -rf ~/.COMPSs/
      sudo sh ${trunk_base}/tests/scripts/configure_hosts_remove
      if [ $? -ne 0 ]; then
        display_error "Cannot remove hosts after execution"
      fi
    fi

    # Unninstall COMPSs if needed
    local unninstaller_script=${script_dir}/installation/unninstall_compss_${distr}.sh
    sudo sh ${unninstaller_script}
    if [ $? -ne 0 ]; then
      echo "------------------------- WARNING -----------------------------"
      echo "Unninstall script failed on ${distr} either because"
      echo "COMPSs was not installed or because there was an internal error"
      echo "---------------------------------------------------------------"
    fi
  }

  set_env() {
    # Define jenkins job and path
    if [ "${distr}" == "ubuntu" ]; then
      JENKINS_JOB="${JENKINS_JOB_BASENAME}Ubuntu"
    elif [ "${distr}" == "debian" ]; then
      JENKINS_JOB="${JENKINS_JOB_BASENAME}Debian"
    elif [ "${distr}" == "suse" ]; then
      JENKINS_JOB="${JENKINS_JOB_BASENAME}OpenSUSE"
    elif [ "${distr}" == "centos" ]; then
      JENKINS_JOB="${JENKINS_JOB_BASENAME}CentOS"
    elif [ "${distr}" == "sc" ]; then
      JENKINS_JOB="${JENKINS_JOB_BASENAME}SC"
    else 
      display_error "Unknown distribution"
      exit 1
    fi
    JENKINS_PACKAGES_PATH="/home/jenkins/jobs/${JENKINS_JOB}/workspace/builders/packages/"

    # Define user variables
    trunk_base=${script_dir}/../../				   # Base trunk folder
    log_base_folder=${trunk_base}/logs/                            # Folder to store logs

    log_folder=${log_base_folder}/${distr}
    specs_base_folder=${trunk_base}/builders/specs/		   # Folder to run package building scripts
    package_base_folder=${trunk_base}/builders/packages/           # Folder to store packages and upload them to repository

    # Create package base folder if needed
    mkdir -p ${package_base_folder}

    # Wipe and create log folder
    rm -rf ${log_folder}
    mkdir -p ${log_folder}

    # Set full log output file
    full_log=${log_folder}/full_exec.log
  }

  exec_distribution() {
    # Compile COMPSs
    compile

    # Create packages
    create_packages 

    # Update to unstable repo
    update_repo "unstable"

    # Install
    install 

    # Run tests
    run_tests

    # Update to testing repo
    update_repo "testing"

    # Clean VM
    # TODO clean_vm

    # Perform live snapshot
    # TODO snapshot

    # END
    echo " "
    echo " CONGRATULATIONS! The ${distr} process succeeded"
    echo " "
  }


  #---------------------------------------------------------------------------------------------------------------------
  # SECOND LEVEL FUNCTIONS
  #---------------------------------------------------------------------------------------------------------------------
  compile() {
    echo -e "\e[0m"
    echo "**************************"
    echo "*** Compile COMPSs SVN ***"
    echo "**************************"
    echo -e "\e[0m"

    cd ${trunk_base}
    mvn -U clean install
    if [ $? -ne 0 ]; then
      display_error "Cannot compile COMPSs SVN Revision"
      exit 1
    fi
    cd ${script_dir}
  }

  create_packages() {
    echo -e "\e[0m"
    echo "**************************"
    echo "*** Generate Packages  ***"
    echo "**************************"
    echo -e "\e[0m"

    if [[ ${DEBIAN_DISTRS} == *"${distr}"* ]]; then
      cd ${specs_base_folder}/deb/
      ./builddeb "${distr}" ${COMPSs_version}
      if [ $? -ne 0 ]; then
        display_error "Building DEB script failed"
        exit 1
      fi 
      cd ${script_dir}
    elif [[ ${RPM_DISTRS} == *"${distr}"* ]]; then
      cd ${specs_base_folder}/rpm/
      ./buildrpm "${distr}" ${COMPSs_version}
      if [ $? -ne 0 ]; then
        display_error "Building RPM script failed"
        exit 1
      fi
      cd ${script_dir}
    else
      # Other (should never reach this point)
      display_error "OTHER PACKAGES NOT SUPPORTED IN THIS SCRIPT"
      exit 1
    fi
  }

  update_repo() {
    echo -e "\e[0m"
    echo "**************************"
    echo "***   Export Packages  ***"
    echo "**************************"
    echo -e "\e[0m"

    local release_type=$1

    # Move built packages to master
    ssh -t -t -o StrictHostKeyChecking=no -o BatchMode=yes -o ChallengeResponseAuthentication=no ${JENKINS_USER}@${MASTER_VM} rm -rf ${JENKINS_PACKAGES_PATH}
    ssh -t -t -o StrictHostKeyChecking=no -o BatchMode=yes -o ChallengeResponseAuthentication=no ${JENKINS_USER}@${MASTER_VM} mkdir -p ${JENKINS_PACKAGES_PATH}
    scp -r -o StrictHostKeyChecking=no ${package_base_folder}/${distr} ${JENKINS_USER}@${MASTER_VM}:${JENKINS_PACKAGES_PATH}
    if [ $? -ne 0 ]; then
      display_error "Cannot move packages to master node"
      exit 1
    fi

    # Ask the repo manager to upload them
    result=$(curl -X POST "http://compss.bsc.es/COMPSsRepositoryService/COMPSsRepo/update?job=${JENKINS_JOB}&distribution=${distr}&type=${release_type}")
    if [ "${result}" != "DONE" ]; then
      display_error "Cannot export packages"
      exit 1
    fi
  }

  install() {
    echo -e "\e[0m"
    echo "**************************"
    echo "***  Installing COMPSs ***"
    echo "**************************"
    echo -e "\e[0m"

    local installer_script=${script_dir}/installation/install_compss_${distr}.sh
   
    sudo sh ${installer_script}
    if [ $? -ne 0 ]; then
      display_error "Cannot install unstable COMPSs version"
      exit 1
    fi
  }

  run_tests() {
    echo -e "\e[0m"
    echo "***************************"
    echo "*** Running local TESTS ***"
    echo "***************************"
    echo -e "\e[0m"

    echo "-- Setting up VM hosts..."
    sudo sh ${trunk_base}/tests/scripts/configure_hosts_insert
    if [ $? -ne 0 ]; then
      display_error "Cannot configure hosts before tests"
      exit 1
    fi

    echo "-- Running NIO tests..."
    cfgFile=$(mktemp -p ${log_folder})
    cat > $cfgFile << EOT
user=$(whoami)
target_base_dir=${log_folder}/tests/
comm=integratedtoolkit.nio.master.NIOAdaptor
JAVA_HOME=${JAVA_HOME}
EOT
    cd ${trunk_base}/tests/scripts/
    ./main local $cfgFile
    #if [ $? -ne 0 ]; then
    #  display_error "Tests failed. Check errors above"
    #  exit 1
    #fi
    cd ${script_dir}
  }

  clean_vm() {
    echo -e "\e[0m"
    echo "**************************"
    echo "***      Clean VM      ***"
    echo "**************************"
    echo -e "\e[0m"

  }

  snapshot() {
    echo -e "\e[0m"
    echo "**************************"
    echo "***    Snapshot VM     ***"
    echo "**************************"
    echo -e "\e[0m"

  }


  #---------------------------------------------------------------------------------------------------------------------
  # MAIN PROGRAM
  #---------------------------------------------------------------------------------------------------------------------

  #---------------------------------------------------------------------------------------------------------------------
  # WARNING: DO NOT MODIFY ANYTHING BELOW THIS MESSAGE UNLESS YOU KNOW WHAT YOU ARE DOING
  #---------------------------------------------------------------------------------------------------------------------

  # Define script variables
  script_dir=$(pwd)/$(dirname $0)

  COMPSs_version=2.0.rc1702

  JENKINS_JOB_BASENAME="COMPSs_Framework_Trunk_Build_"
  JENKINS_USER="jenkins"
  MASTER_VM="bscgrid05.bsc.es"

  DEBIAN_DISTRS="ubuntu debian"
  RPM_DISTRS="suse centos"
  OTHER_DISTRS="sc"

  # Check parameters
  if [ $# -ne 1 ]; then
     display_error "Incorrect number of parameters"
     usage
     exit 1
  fi

  distr=$1
  if [[ ${DEBIAN_DISTRS} != *"${distr}"* ]] && [[ ${RPM_DISTRS} != *"${distr}"* ]] && [[ ${OTHER_DISTRS} != *"${distr}"* ]]; then
     display_error "Unknown distribution parameter"
     usage
     exit 1
  fi
 
  # Log start of execution
  echo -e "\e[0m"
  echo "********************************"
  echo "*** Start process on ${distr}  ***"
  echo "********************************"
  echo -e "\e[0m"
 
  # Set environment
  set_env
  if [ $? -ne 0 ]; then
    display_error "Cannot set script envrionment"
    exit 1
  fi

  # Trap for clean
  trap clean EXIT
  
  # Execute distribution
  if [[ ${OTHER_DISTRS} == *"${distr}"* ]]; then
    # Execute SC
    ${script_dir}/pre_process/exec_sc ${distr} ${log_folder} ${package_base_folder} > >(tee ${full_log}) 2> >(tee ${full_log} >&2)
  else
    exec_distribution > >(tee ${full_log}) 2> >(tee ${full_log} >&2)
    exitValue=$?
  fi
  exitValue=$?

  # End value
  if [ $exitValue -ne 0 ]; then
    display_error "Build on distribution failed. Please check errors above"
  else
    echo " "
    echo " SUCCESS!"
    echo " "
  fi

  exit $exitValue

