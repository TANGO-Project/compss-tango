COMP Superscalar Framework ChangeLog


Release number 1.1.1
Release date: 1-Oct-2013 
-------------------------------
This is the first public release of the COMP Superscalar Framework.


Release number 1.1.2
Release date: 5-Jun-2014 
-------------------------------
 * C/C++ binding.
 * Python binding.
 * Integrated Development Environment for COMPSs applications (IDE)
 * Priority tasks.
 * New tracing system using the Extrae tool.
 * Deleting a file within an OE removes all the replicas in the system.
 * Updated the SSH Trilead adaptor libraries to remove unnecessary sleeps.
 * Scripts for submission to queue systems (LSF, PBS, Slurm).
 * Configuration of application directory and library path in project XML file.
 * Separate logs for resubmitted / rescheduled tasks.
 * Create a COMPSs sandbox in the workers instead of JavaGAT's.


Release number 1.2
Release date: Nov-2014 
-------------------------------
 * N implementations for task methods, each with its own constraints.
 * Constraint-aware resource management.
 * Support for multicore tasks.
 * Pluggable schedulers: facilitate the addition of new schedulers and policies.
 * Extended support for objects in C/C++ binding.
 * Extended IDE for N implementations and deployment through PMES.
 * Update cloud connector for rOCCI to work with rocci-cli v4.2.5.
 * Enhance rOCCI connector to compute the real VM creation times.
 * Extended resources schema to support Virtual Appliances pricing.
 
 * New LSF GAT adaptor.

 * Deprecated Azure and EMOTIVE Cloud connectors.
 * Deprecated Azure GAT adaptor.


Release number 1.3
Release date: Nov-2015
-------------------------------
New features:
        * Runtime:
                - Persistent workers: workers can be deployed on computing nodes and persist during all the application lifetime, reducing runtime overhead.
		  Previous implementation of workers based on a per task process is still supported.
                - Enhanced logging system
                - Interoperable communication layer: different inter-nodes communication protocol is supported by implementing the Adaptor interface (JavaGAT
		  and NIO implementations already included)
                - Simplified cloud connectors interface
                - JClouds connector

        * Python:
                - Added constraints support
                - Enhanced methods support
                - Lists accepted as a tasks' parameter type
                - Support for user decorators

        * Tools:
                - New monitoring tool: with new views, as workload and possibility of visualizing information about previous runs
                - Enhanced Tracing mechanism

        * Simplified execution scripts

        * Simplified installation on Supercomputers

Known Limitations:
     * Exceptions raised from tasks are not handled by the master
     * Java tasks must be declared as public
     * Java objects MUST be serializable or, at least, follow the java beans model
     * Support limited to SOAP based services
     * Persistent Workers do NOT isolate task executions in a sandbox

For further information please refer to COMPSs User Manual: Application development


Release number 1.4
Release date: April-2016
-------------------------------
New features:
	* Runtime:
                    - Support for Dockers added
                    - Support for Chameleon added
                    - Object cache for persistent workers
                    - Improved error management
                    - Connector for submitting tasks to MN supercomputer from external COMPSs applications added
		    - Bug-fixes

	* Python:                    
                    - Bug-fixes                    

	* Tools:
                    - Enhanced Tracing mechanism:
                        · Reduced overhead using native java API
                        · Support for communications instrumentation added
                        · Support for PAPI hardware counters added

Known Limitations:
        * When executing python applications with constraints in the cloud the initial VMs
 must be set to 0

For further information please refer to COMPSs User Manual: Application development


Release number 2.0 Amapola (Poppy)
Release date: November-2016
-------------------------------
New features:
	* Runtime:
		- Upgrade to Java 8
		- Support to remote input files (input files already at workers)
		- Integration with Persistent Objects
		- Elasticity with Docker and Mesos
		- Multi-processor support (CPUs, GPUs, FPGAs)
		- Dynamic constraints with environment variables
		- Scheduling taking into account the full tasks graph (not only ready tasks)
		- Support for SLURM clusters
		- Initial COMPSs/OmpSs integration
		- Replicated tasks: Tasks executed in all the workers
		- Explicit Barrier

	* Python:
		- Python user events and HW counters tracing
		- Improved PyCOMPSs serialization. Added support for lambda and generator parameters.

	* C:
		- Constraints support

	* Tools:
		- Improved current graph visualization on COMPSs Monitor

Improvements:
	- Simplified Resource and Project files (NO retrocompatibility)
	- Improved binding workers execution (use pipes instead of Java Process Builders)
	- Simplifies cluster job scripts and supercomputers configuration
	- Several bug fixes

Known Limitations:
        * When executing python applications with constraints in the cloud the initial VMs
 must be set to 0

For further information please refer to COMPSs User Manual: Application development


Release number 2.1 Bougainvillea
Release date: June-2017                                                                                                                                                                                                                     
-------------------------------
New features:
        * Runtime:
                - New annotations to simplify tasks that call external binaries
                - Integration with other programming models (MPI, OmpSs...)
                - Support for Singularity containers in clusters
                - Extension of the scheduling to support multi-node tasks (MPI applications as tasks)
                - Support for Grid Engine job scheduler in clusters
                - Language flag automatically inferred in the runcompss script
                - New schedulers based on tasks’ generation order
                - Core affinity and over-subscribing thread management in multi-core clusters (used with MKL libraries, for example)

        * Python:
                - @local annotation to support simpler data synchronizations in master (requires to install guppy)
                - Support for args and kwargs parameters as task dependencies
                - Task versioning support in python (multiple behaviors of the same task)
                - New Python persistent workers that reduce overhead of Python tasks
                - Support for task-thread affinity
                - Tracing extended to support for Python user events and HW counters (with known issues)

        * C/C++:
                - Extension of file management API (compss_fopen, compss_ifstream,  compss_ofstream, compss_delete_file)
                - Support for task-thread affinity

        * Tools:
                - Visualization of not-running tasks in current graph of the COMPSs Monitor


Improvements
        - Improved PyCOMPSs serialization
        - Improvements in cluster job scripts and supercomputers configuration
        - Several bug fixes


Known Limitations:
        - When executing Python applications with constraints in the cloud the <InitialVMs> property must be set to 0
        - Tasks that invoke numpy and MKL may experience issues if tasks use a different number of MKL threads. This is due to
          the fact that MKL reuses threads in the different calls and it does not change the number of threads from one call to another.


For further information, please refer to “COMPSs User Manual: Application development guide”.

