#!/bin/bash

  #Obtain parameters
  output_file=$1 
  target_log_folder=$2
  comm=$3
  
  # Log files
  runtime_log="${target_log_folder}/runtime.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f ${output_file} ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 ${output_file})
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a ${output_file}
        exit 1
     fi
  else
     echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a ${output_file}
     exit 1
  fi
  # Check that ErrorManager has not generated any ERROR or FATAL message.
  if $(cat "${output_file}" "${runtime_log}" | tr '\n' ' ' | grep -E -q "[ERRMGR].*(ERROR|FATAL):.*.*Shutting"); then
    echo "ERROR: ERRMGR RAISED A FATAL ERROR. TEST FAILED." | tee -a ${output_file}
    exit 1
  fi
  
  #----------------------------------------------------------------------------------
  # Check Task description
  # WARNING: Checks are performed only in NIO because in GAT we don't know the job description
  #          However, if the application has ended, the constraints are correctly loaded because the resource can strictly
  #          execute the task
  exitValue=0
  if [ "${comm}" == "es.bsc.compss.nio.master.NIOAdaptor" ]; then
    processorExpected="PROCESSOR MainProcessor TYPE=CPU COMPUTING_UNITS=2 SPEED=2.4 INTERNAL_MEMORY=-1.0 ARCHITECTURE=amd64 PROP_NAME=ThreadAffinity PROP_VALUE=Big"
    generalExpected="GENERAL_COUNTS TOTAL_CPUs=1 TOTAL_CPU_CU=2 TOTAL_GPUs=0 TOTAL_GPU_CU=0 TOTAL_FPGAs=0 TOTAL_FPGA_CU=0 TOTAL_OTHERs=0 TOTAL_OTHER_CU=0"
    memoryExpected="MEMORY SIZE=8.0 TYPE=Volatile"
    storageExpected="STORAGE SIZE=240.0 TYPE=SSD"
    osExpected="OPERATING_SYSTEM TYPE=Linux DISTRIBUTION=OpenSUSE VERSION=13.2"
    softwareExpected="SOFTWARE JAVA, PYTHON, COMPSS, "
    queuesExpected="HOST_QUEUES SEQUENTIAL, DEBUG, BSC, "
    pricesExpected="PRICE TIME_UNIT=-1 PRICE_PER_TIME=-1.0"
    wallclockExpected="WALLCLOCK=10"
    
    processorGot=$(cat ${runtime_log} | grep "Finished sending new Task" | tr "[" "\n" | tail -n 10 | head -n 1 | tr "]" "\n" | head -n 1)
    generalGot=$(cat ${runtime_log} | grep "Finished sending new Task" | tr "[" "\n" | tail -n 9 | head -n 1 | tr "]" "\n" | head -n 1)
    memoryGot=$(cat ${runtime_log} | grep "Finished sending new Task" | tr "[" "\n" | tail -n 8 | head -n 1 | tr "]" "\n" | head -n 1)
    storageGot=$(cat ${runtime_log} | grep "Finished sending new Task" | tr "[" "\n" | tail -n 7 | head -n 1 | tr "]" "\n" | head -n 1)
    osGot=$(cat ${runtime_log} | grep "Finished sending new Task" | tr "[" "\n" | tail -n 6 | head -n 1 | tr "]" "\n" | head -n 1)
    softwareGot=$(cat ${runtime_log} | grep "Finished sending new Task" | tr "[" "\n" | tail -n 5 | head -n 1 | tr "]" "\n" | head -n 1)
    queuesGot=$(cat ${runtime_log} | grep "Finished sending new Task" | tr "[" "\n" | tail -n 4 | head -n 1 | tr "]" "\n" | head -n 1) 
    pricesGot=$(cat ${runtime_log} | grep "Finished sending new Task" | tr "[" "\n" | tail -n 3 | head -n 1 | tr "]" "\n" | head -n 1)
    wallclockGot=$(cat ${runtime_log} | grep "Finished sending new Task" | tr "[" "\n" | tail -n 2 | head -n 1 | tr "]" "\n" | head -n 1) 

    if [ "${processorGot}" != "${processorExpected}" ]; then
      echo "ERROR: Processor constraints do not match"
      echo "GOT: ${processorGot}"
      echo "EXPECTED: ${processorExpected}"
      exitValue=1
    fi
    
    if [ "${generalGot}" != "${generalExpected}" ]; then
      echo "ERROR: General constraints do not match"
      echo "GOT: ${generalGot}"
      echo "EXPECTED: ${generalExpected}"
      exitValue=1
    fi
    
    if [ "${memoryGot}" != "${memoryExpected}" ]; then
      echo "ERROR: Memory constraints do not match"
      echo "GOT: ${memoryGot}"
      echo "EXPECTED: ${memoryExpected}"
      exitValue=1
    fi
    
    if [ "${storageGot}" != "${storageExpected}" ]; then
      echo "ERROR: Storage constraints do not match"
      echo "GOT: ${storageGot}"
      echo "EXPECTED: ${storageExpected}"
      exitValue=1
    fi
    
    if [ "${osGot}" != "${osExpected}" ]; then
      echo "ERROR: OS constraints do not match"
      echo "GOT: ${osGot}"
      echo "EXPECTED: ${osExpected}"
      exitValue=1
    fi
    
    if [ "${softwareGot}" != "${softwareExpected}" ]; then
      echo "ERROR: Software constraints do not match"
      echo "GOT: ${softwareGot}"
      echo "EXPECTED: ${softwareExpected}"
      exitValue=1
    fi
    
    if [ "${queuesGot}" != "${queuesExpected}" ]; then
      echo "ERROR: Queue constraints do not match"
      echo "GOT: ${queuesGot}"
      echo "EXPECTED: ${queuesExpected}"
      exitValue=1
    fi
    
    if [ "${pricesGot}" != "${pricesExpected}" ]; then
      echo "ERROR: Price constraints do not match"
      echo "GOT: ${pricesGot}"
      echo "EXPECTED: ${pricesExpected}"
      exitValue=1
    fi
    
    if [ "${wallclockGot}" != "${wallclockExpected}" ]; then
      echo "ERROR: Wallclock constraints do not match"
      echo "GOT: ${wallclockGot}"
      echo "EXPECTED: ${wallclockExpected}"
      exitValue=1
    fi
  fi
  
  #----------------------------------------------------------------------------------
  # Report result status  
  exit ${exitValue}
