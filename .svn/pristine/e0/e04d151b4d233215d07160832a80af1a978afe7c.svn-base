#!/bin/bash

  # Obtain parameters
  output_file=$1
  error_file=$2
  target_log_folder=$3

  # Log files
  runtime_log="${target_log_folder}/runtime.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f ${output_file} ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 ${output_file})
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a ${output_file}
        exit 1
     fi
  else
     echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a ${output_file}
     exit 1
  fi
  # Check that ErrorManager has not generated any ERROR or FATAL message.
  if $(cat "${output_file}" "${runtime_log}" | tr '\n' ' ' | grep -E -q "[ERRMGR].*(ERROR|FATAL):.*.*Shutting"); then
    echo "ERROR: ERRMGR RAISED A FATAL ERROR. TEST FAILED." | tee -a ${output_file}
    exit 1
  fi

  #----------------------------------------------------------------------------------

  jobs_logs="${target_log_folder}/jobs"

  friday=$(grep -r -l "date -d next friday" $jobs_logs)
  fridayDate=$(date -d "next friday")
  if ! $(cat "$friday" | grep -E -q "$fridayDate"); then
    echo "ERROR: TASK FAILED: testFunctionalUsage function failed." | tee -a ${output_file}
    exit 1
  fi

  monday=$(grep -r -l "date -d next monday" $jobs_logs)
  mondayDate=$(date -d "next monday")
  if ! $(cat "$monday" | grep -E -q "$mondayDate"); then
    echo "ERROR: TASK FAILED: testFunctionalUsageWithConstraint function failed." | tee -a ${output_file}
    exit 1
  else
    apearances=$(cat "$monday" | grep "$mondayDate" | wc -l)
    if [ ! "$apearances" -eq "4" ]; then
      echo "ERROR: TASK FAILED: testFunctionalUsageWithConstraint function computingNodes parameter failed." | tee -a ${output_file}
      exit 1
    fi
  fi

  hellofile=$(grep -r -l "sed s/Hi/HELLO/g" $jobs_logs)
  hello=$(grep -r -l "HELLO, this is a simple test to grep." $hellofile)
  if [[ -z "$hello" ]]; then
     echo "ERROR: TASK FAILED: testFileManagementIN function failed." | tee -a ${output_file}
    exit 1
  else
    apearances=$(cat "$hellofile" | grep "HELLO, this is a simple test to grep." | wc -l)
    if [ ! "$apearances" -eq "16" ]; then
      echo "ERROR: TASK FAILED: testFileManagementIN function computingNodes parameter failed." | tee -a ${output_file}
      exit 1
    fi
  fi

  if grep -q "do" src/grepoutfile; then
    echo "ERROR: TASK FAILED: testFileManagement function failed."  | tee -a ${output_file}
    exit 1
  fi

  myLs=$(grep -r -l "ls -l --hide=.*infile.* --sort=size" $jobs_logs)
  if [[ -z "$myLs" ]]; then
    echo "ERROR: TASK FAILED: testFilesAndPrefix function failed." | tee -a ${output_file}
    exit 1
  else
      # Check how many infile are that are symlinks (start with l).
      apearances=$(cat "$myLs" | grep "infile" | grep "^l" | wc -l)
      if [ ! "$apearances" -eq "2" ]; then
        echo "ERROR: TASK FAILED: testFilesAndPrefix function computingNodes parameter failed." | tee -a ${output_file}
        exit 1
      fi
  fi

  myLs2=$(grep -r -l "ls -l --hide=.*inoutfile.* --sort=time" $jobs_logs)
  if [[ -z "$myLs2" ]]; then
     echo "ERROR: TASK FAILED: testFilesAndPrefixWithoutType function failed." | tee -a ${output_file}
    exit 1
  else
    # Check how many inoutfile are that are symlinks (start with l).
    apearances=$(cat "$myLs2" | grep "inoutfile" | grep "^l" | wc -l)
    if [ ! "$apearances" -eq "2" ]; then
      echo "ERROR: TASK FAILED: testFilesAndPrefixWithoutType function computingNodes parameter failed." | tee -a ${output_file}
      exit 1
    fi
  fi

  #----------------------------------------------------------------------------------
  # Grep for unit test errors (ERROR or FAIL)
  errors=$(cat "${output_file}" "${error_file}" | grep "ERROR" | cat)
  fails=$(cat "${output_file}" "${error_file}" | grep "FAIL" | cat)
  if [ "${errors}" != "" ] || [ "${fails}" != "" ]; then
    echo "ERROR: UNIT TEST RAISED AN ERROR." | tee -a ${output_file}
    exit 1
  fi

  exit 0
