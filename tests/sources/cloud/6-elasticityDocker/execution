  #!/bin/bash

  #Obtain parameters
  COMPSs_exec=$1
  comm=$2
  base_app_dir=$3
  COMPSs_log_folder=$4
  target_log_folder=$5
  master_template_id=$6
  os_type=$7
  owner=$8
  appName=Simple

  LOCAL_USERNAME=$(whoami)

  #Global variables
  exitValue=0
  remote_app_dir=${base_app_dir}/app

  mkdir -p ${remote_app_dir}

  #export CLASSPATH=$CLASSPATH:/home/compss/Simple.jar # Location of the jar in the vm

  #----------------------------------------------------------------------------------
  # Create project XML
  cp -f ${base_app_dir}/project_dockerProvider.xml ${base_app_dir}/project_dockerProvider.xml
  sed -i "s|LOCAL_USER|${LOCAL_USERNAME}|g" ${base_app_dir}/project_dockerProvider.xml

  # Create resources XML
  cp -f ${base_app_dir}/resources_dockerProvider.xml ${base_app_dir}/resources_dockerProvider.xml
  sed -i "s|LOCAL_USER|${LOCAL_USERNAME}|g" ${base_app_dir}/resources_dockerProvider.xml

  #Create package
  mkdir ${base_app_dir}/tmp
  cp ${base_app_dir}/project_dockerProvider.xml ${base_app_dir}/tmp/project_dockerProvider.xml
  cp ${base_app_dir}/resources_dockerProvider.xml ${base_app_dir}/tmp/resources_dockerProvider.xml
  cp ${base_app_dir}/${appName}.jar ${base_app_dir}/tmp/${appName}.jar
  cd ${base_app_dir}/tmp/
  tar zcf ${appName}.tar.gz *
  cd $(dirname $0)
  cp -f ${base_app_dir}/tmp/${appName}.tar.gz ${remote_app_dir}

  #----------------------------------------------------------------------------------
  #Run application 1 - One Provider
  echo
  echo "*** RUNNING JAVA APPLICATION ELASTICITY - DOCKER - ONE PROVIDER"
  output_log="${target_log_folder}/dockerProvider.outputlog"
  error_log="${target_log_folder}/dockerProvider.errorlog"

  expectedTime=1000s
  counterVal=1
  numTasks=25
  minVM=1
  maxVM=3
  creationTime=40

  sed -i "s|MIN_VMS|${minVM}|g" ${base_app_dir}/project_dockerProvider.xml
  sed -i "s|MAX_VMS|${maxVM}|g" ${base_app_dir}/project_dockerProvider.xml

  echo "${COMPSs_exec} --project=${base_app_dir}/project_dockerProvider.xml --resources=${base_app_dir}/resources_dockerProvider.xml --debug --comm=$comm --lang=java --classpath=${base_app_dir}/${appName}.jar:${remote_app_dir}/${appName}.jar simple.Simple $counterVal $numTasks $minVM $maxVM $creationTime > >(tee ${output_log}) 2> >(tee ${error_log} >&2)"

  timeout --signal=2 $expectedTime ${COMPSs_exec} \
     --project=${base_app_dir}/project_dockerProvider.xml \
     --resources=${base_app_dir}/resources_dockerProvider.xml \
     --debug \
     --comm=$comm \
     --lang=java \
     --classpath=${base_app_dir}/${appName}.jar:${remote_app_dir}/${appName}.jar \
     simple.Simple $counterVal $numTasks $minVM $maxVM $creationTime > >(tee ${output_log}) 2> >(tee ${error_log} >&2)

  #Check timeout
  if [[ "$?" = "124" ]]; then
     #Copy LOG files
     cp -rf ${COMPSs_log_folder}/simple.Simple_01/* ${target_log_folder}

     #Report time out
     echo "[WARNING] Java Application timed out" >> ${output_log}
     exitValue=124
  else
     #Copy LOG files
     cp -rf ${COMPSs_log_folder}/simple.Simple_01/* ${target_log_folder}

     #Check result
     sleep 30
     ${base_app_dir}/result ${output_log} ${target_log_folder} $minVM $maxVM
     exitValue=$?
  fi


  #----------------------------------------------------------------------------------
  #Return execution status
  exit $exitValue
