  #!/bin/bash

  #Obtain parameters
  COMPSs_exec=$1
  comm=$2
  base_app_dir=$3
  COMPSs_log_folder=$4
  target_log_folder=$5
  master_template_id=$6
  os_type=$7
  owner=$8
  appName=Simple

  #Global variables
  exitValue=0
  cert_suffix=.pem
  remote_certs_dir=${base_app_dir}/certs
  remote_apps_dir=${base_app_dir}/apps

  mkdir -p ${remote_certs_dir}
  mkdir -p ${remote_apps_dir}

  testName=mesosFramework

  #----------------------------------------------------------------------------------
  #Create project and resources XML
  cp -f ${base_app_dir}/project_${testName}_base.xml ${base_app_dir}/project_${testName}.xml
  sed -i '/<Value>jenkins-test.pem<\/Value>/c<Value>'${remote_certs_dir}'\/jenkins-test.pem<\/Value>' ${base_app_dir}/project_${testName}.xml
  sed -i '/<Source>'$appName'.tar.gz<\/Source>/c<Source>'${remote_apps_dir}'\/'$appName'.tar.gz<\/Source>' ${base_app_dir}/project_${testName}.xml
  sed -i '/<Value>\/path\/to\/certs<\/Value>/c<Value>'${remote_certs_dir}'<\/Value>' ${base_app_dir}/project_${testName}.xml
  cp -f ${base_app_dir}/resources_${testName}_base.xml ${base_app_dir}/resources_${testName}.xml

  #Create package
  mkdir ${base_app_dir}/tmp
  cp ${base_app_dir}/project_${testName}.xml ${base_app_dir}/tmp/project_${testName}.xml
  cp ${base_app_dir}/resources_${testName}.xml ${base_app_dir}/tmp/resources_${testName}.xml
  cp ${base_app_dir}/${appName}.jar ${base_app_dir}/tmp/${appName}.jar
  cd ${base_app_dir}/tmp/
  tar zcf ${appName}.tar.gz *
  cd $(dirname $0)
  cp -f ${base_app_dir}/tmp/${appName}.tar.gz ${remote_apps_dir}

  #Create cert structure
  # (DONE BY DEPLOYMENT)
  #cp -f ${base_app_dir}/certs/${owner}${cert_suffix} ${remote_certs_dir};

  #----------------------------------------------------------------------------------
  #Run application 1 - One Provider
  echo
  echo "*** RUNNING JAVA APPLICATION ELASTICITY - MESOS FRAMEWORK"
  output_log="${target_log_folder}/${testName}.outputlog"
  error_log="${target_log_folder}/${testName}.errorlog"

  expectedTime=3000s
  counterVal=1
  numTasks=30
  minVM=1
  maxVM=4
  creationTime=30
  echo "${COMPSs_exec} --project=${base_app_dir}/project_${testName}.xml --resources=${base_app_dir}/resources_${testName}.xml --debug --comm=$comm --lang=java --classpath=${base_app_dir}/${appName}.jar simple.Simple $counterVal $numTasks $minVM $maxVM $creationTime > >(tee ${output_log}) 2> >(tee ${error_log} >&2)"

  timeout --signal=2 $expectedTime ${COMPSs_exec} \
     --project=${base_app_dir}/project_${testName}.xml \
     --resources=${base_app_dir}/resources_${testName}.xml \
     --debug \
     --comm=$comm \
     --lang=java \
     --classpath=${base_app_dir}/${appName}.jar \
     simple.Simple $counterVal $numTasks $minVM $maxVM $creationTime > >(tee ${output_log}) 2> >(tee ${error_log} >&2)

  #Check timeout
  if [[ "$?" = "124" ]]; then
     #Copy LOG files
     cp -rf ${COMPSs_log_folder}/simple.Simple_01/* ${target_log_folder}

     #Report time out
     echo "[WARNING] Java Application timed out" >> ${output_log}
     exitValue=124
  else
     #Copy LOG files
     cp -rf ${COMPSs_log_folder}/simple.Simple_01/* ${target_log_folder}

     #Check result
     sleep 60
     ${base_app_dir}/result ${output_log} ${target_log_folder} $minVM $maxVM
     exitValue=$?
  fi


  #----------------------------------------------------------------------------------
  #Return execution status
  exit $exitValue
