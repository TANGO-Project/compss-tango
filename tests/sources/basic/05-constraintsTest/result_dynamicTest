#!/bin/bash

  # Obtain parameters
  output_file=$1 
  target_log_folder=$2
  
  # Log files
  runtime_log="${target_log_folder}/runtime.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f ${output_log} ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 ${output_file})
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a ${output_file}
        exit 1
     fi
  else
     echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a ${output_file}
     exit 1
  fi
  # Check that ErrorManager has not generated any ERROR or FATAL message.
  if $(cat "${output_file}" "${runtime_log}" | tr '\n' ' ' | grep -E -q "[ERRMGR].*(ERROR|FATAL):.*.*Shutting"); then
    echo "ERROR: ERRMGR RAISED A FATAL ERROR. TEST FAILED." | tee -a ${output_file}
    exit 1
  fi
 
  #----------------------------------------------------------------------------------
  # Compute result status
  WORKER_CORES=4
  TASK_CORE_REQ=(0 3 3 1 1)
  
  TASK_JOBS=()
  jobs=$(cat ${runtime_log} | grep -v "Communication" | egrep "completedJob|New Job" | cut -c 79-)

  while read -r line; do
    first=$(echo $line | awk '{ print $1 }')
    if [ "$first" == "New" ]; then
      jobId=$(echo $line | awk '{ print $3 }')
      taskId=$(echo $line | awk '{ print $5 }')
      taskId=${taskId::-1}
      TASK_JOBS[$jobId]=$taskId

      cpu=${TASK_CORE_REQ[$taskId]}
      WORKER_CORES=$(($WORKER_CORES-$cpu))
      if [ "$WORKER_CORES" -lt "0" ]; then
        echo "[ERROR] Dynamic available resources are not correctly managed." | tee -a ${output_file}
        echo "The execution of task $taskId overloads the resource"
        exit 1
      fi
    else
      jobId=$(echo $line | awk '{ print $6 }')
      taskId=${TASK_JOBS[$jobId]}
      cpu=${TASK_CORE_REQ[$taskId]}
      WORKER_CORES=$(($WORKER_CORES+$cpu))
    fi
  done <<< "$jobs"
  
  exit 0
