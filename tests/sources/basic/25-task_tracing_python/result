#!/bin/bash

  #Obtain parameters
  output_file=$1
  target_log_folder=$2
  comm=$3
  number_of_tasks=32
  number_of_workers=1
  errors=false

  # Log files
  runtime_log="${target_log_folder}/runtime.log"

  # Should be equal to Tracer.java definitions
  SYNC_EVENTS=8000666
  TASK_EVENTS=8000010

  PROCESS_CREATION=100
  WORKER_INITIALIZATION=102
  PARAMETER_PROCESSING=103
  LOGGING=104
  MODULES_IMPORT=105
  WORKER_END=106
  PROCESS_DESTRUCTION=107

  TASK_EXECUTION=120
  SERIALIZATION=121

  #----------------------------------------------------------------------------------
  # Check that task-bindings events are present and the # is correct

  # GAT does not support task tracing
  if [ "${comm}" != "integratedtoolkit.gat.master.GATAdaptor" ]; then


      evts_tasks=$(grep -c ":${TASK_EVENTS}:${SERIALIZATION}" ${target_log_folder}/trace/task_tracing_kmeans.py_compss_trace_*.prv)

      sync_evts_init=$(grep -c ":${SYNC_EVENTS}:[1-9][0-9]*" ${target_log_folder}/trace/task_tracing_kmeans.py_compss_trace_*.prv)
      sync_evts_end=$(grep -c ":${SYNC_EVENTS}:0" ${target_log_folder}/trace/task_tracing_kmeans.py_compss_trace_*.prv)

      end_evts=$(grep -c ":${TASK_EVENTS}:0" ${target_log_folder}/trace/task_tracing_kmeans.py_compss_trace_*.prv)

      if [ "${evts_tasks}" != "$((${number_of_tasks} * 2))" ]; then
         echo "[ERROR] Incorrect number of python task worker end events. [${evts_tasks}/$((${number_of_tasks} * 2))]"
         errors=true
      fi 

      # start_evts=$((${evts_type1}+${evts_type2}+${evts_type3}+${evts_type4}+${evts_type5}+${evts_type6}+${evts_type7}+${evts_type8}+${evts_type9}))
      start_evts=${evts_tasks}
      if [ "$start_evts" != "$end_evts" ] ; then
        echo "[ERROR] Number of start and end emits are not equal"
        errors=true
      fi

      if [ "${sync_evts_init}" != "$((4*${number_of_workers}))" ]; then
        echo "[ERROR] Number of start and end synchronization events are not 4 times the number of workers. Workers: ${number_of_workers}, Events: [${sync_evts_init}/${sync_evts_end}]"
        errors=true
      fi

  fi

  # Check that ErrorManager has not generated any ERROR or FATAL message.
  if $(cat "${output_file}" "${runtime_log}" | tr '\n' ' ' | grep -c -E -q "[ERRMGR].*(ERROR|FATAL):.*.*Shutting"); then
    echo "ERROR: ERRMGR RAISED A FATAL ERROR. TEST FAILED." | tee -a ${output_file}
    errors=true
  fi


  # Exit value
  if [ $errors == true ] ; then
    exit 1
  fi

  exit 0


