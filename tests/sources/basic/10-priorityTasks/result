#!/bin/bash
  
  #Obtain parameters
  output_file=$1 
  target_log_folder=$2
  normal=$3
  priority=$4
    
  # Log files
  runtime_log="${target_log_folder}/runtime.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f ${output_file} ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 ${output_file})
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a ${output_file}
        exit 1
     fi
  else
     echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a ${output_file}
     exit 1
  fi
  # Check that ErrorManager has not generated any ERROR or FATAL message.
  if $(cat "${output_file}" "${runtime_log}" | tr '\n' ' ' | grep -E -q "[ERRMGR].*(ERROR|FATAL):.*.*Shutting"); then
    echo "ERROR: ERRMGR RAISED A FATAL ERROR. TEST FAILED." | tee -a ${output_file}
    exit 1
  fi
 
  #----------------------------------------------------------------------------------
  # Compute result status
  acceptanceRate=90
  totalTasks=$(($normal+$priority))
  
  priorCount=0
  normalCount=0
  for (( i=1; i<=$priority; i++ )); do
      job_name=$(cat ${target_log_folder}/jobs/job${i}_NEW.out | grep "Method definition" | tr "[" "\n" | tr "," "\n" | tr "=" "\n" | tr "]" "\n" | tail -n 2 | head -n 1)
      if [ "${job_name}" == "" ]; then
         # GAT execution
         job_name=$(cat ${target_log_folder}/jobs/job${i}_NEW.out | grep "Method Description 1" | tr ":" "\n" | tr " " "\n" | tail -n 1)
      fi
       
      if [ "$job_name" != "normalTask" ]; then
	    priorCount=$((priorCount+1))
      else
	    normalCount=$((normalCount+1))
      fi
  done
  
  priorRate=$((($priorCount*100)/$priority))
  if [ $priorRate -lt $acceptanceRate ]; then
    echo "[ERROR] Priority tasks are not correctly scheduled." | tee -a ${output_file}
    exit 1
  fi
  
  priorCount=0
  normalCount=0
  for (( i=$priority+1; i<=$totalTasks; i++ )); do
      job_name=$(cat ${target_log_folder}/jobs/job${i}_NEW.out | grep "Method definition" | tr "[" "\n" | tr "," "\n" | tr "=" "\n" | tr "]" "\n" | tail -n 2 | head -n 1)
      if [ "${job_name}" == "" ]; then
         # GAT execution
         job_name=$(cat ${target_log_folder}/jobs/job${i}_NEW.out | grep "Method Description 1" | tr ":" "\n" | tr " " "\n" | tail -n 1)
      fi
      
      if [ "$job_name" != "normalTask" ]; then
	priorCount=$((priorCount+1))
      else
	normalCount=$((normalCount+1))
      fi
  done
  
  normalRate=$((($normalCount*100)/$normal))
  if [ $normalRate -lt $acceptanceRate ]; then
    echo "[ERROR] Priority tasks are not correctly scheduled." | tee -a ${output_file}
    exit 1  
  fi
  
  #Report result status
  exit 0
  
