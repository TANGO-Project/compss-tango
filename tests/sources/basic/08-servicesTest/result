#!/bin/bash -e

  # Obtain parameters
  output_file=$1 
  target_log_folder=$2
  
  # Log files
  runtime_log="${target_log_folder}/runtime.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f ${output_log} ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 ${output_file})
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a ${output_file}
        exit 1
     fi
  else
     echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a ${output_file}
     exit 1
  fi
  # Check that ErrorManager has not generated any ERROR or FATAL message.
  if $(cat "${output_file}" "${runtime_log}" | tr '\n' ' ' | grep -E -q "[ERRMGR].*(ERROR|FATAL):.*.*Shutting"); then
    echo "ERROR: ERRMGR RAISED A FATAL ERROR. TEST FAILED." | tee -a ${output_file}
    exit 1
  fi

  #----------------------------------------------------------------------------------
  # COMPUTE EXPECTED VALUES
  productivity_create=0
  num_create=0
  productivity_print=0
  num_print=0
  
  jobs_path="${target_log_folder}/jobs/"
  files=$(ls ${jobs_path})
  for file in $files; do
    if [ "${file: -3}" = "out" ]; then
       method_name=$(cat ${jobs_path}$file | grep "Method definition" | tr "[" "\n" | tr "," "\n" | tr "=" "\n" | tr "]" "\n" | tail -n 2 | head -n 1)
       if [ "${method_name}" == "" ]; then
         # GAT execution
         method_name=$(cat ${jobs_path}$file | grep "Method Description 1" | tr ":" "\n" | tr " " "\n" | tail -n 1)
       fi
       
       if [ "$method_name" = "createPerson" ]; then
          #Greps all the wh / prod computed by createPerson method
          wh=$(cat ${jobs_path}$file | grep "Working Hours:" | cut -c 27-)
          prod=$(cat ${jobs_path}$file | grep "Production:" | cut -c 27-)
          productivity=$(bc <<< "scale=5; $prod/$wh")

          #Adds productivity to global count
          productivity_create=$(bc <<< "scale=5; $productivity_create+$productivity")
          num_create=$((num_create + 1))
       else
          if [ "$method_name" = "print" ]; then
             #Greps all the wh / prod computed by print method
             wh=$(cat ${jobs_path}$file | grep "Working Hours:" | cut -c 27-)
             prod=$(cat ${jobs_path}$file | grep "Production:" | cut -c 27-)
             productivity=$(bc <<< "scale=5; $prod/$wh")

             #Adds productivity to global count
             productivity_print=$(bc <<< "scale=5; $productivity_print+$productivity")
             num_print=$((num_print + 1))

             type_print=$(cat ${jobs_path}$file | grep "Name" | cut -c 27-)
             #If it's the stateless print (owner) adds it to create values too
             if [ "$type_print" = "Me" ]; then
                productivity_create=$(bc <<< "scale=5; $productivity_create+$productivity")
                num_create=$((num_create + 1))
             fi
          fi
       fi
    fi
  done
  productivity_print=$(bc <<< "scale=3; ${productivity_print}/${num_print}")
  productivity_create=$(bc <<< "scale=3; ${productivity_create}/${num_create}")
  
  # COMPUTE GOT VALUES
  productivity_ss=$(cat ${output_file} | grep "\[LOG\] \-\- Productivity obtained ss:" | cut -c 36-)
  productivity_ms=$(cat ${output_file} | grep "\[LOG\] \-\- Productivity obtained ms:" | cut -c 36-)
  
  #----------------------------------------------------------------------------------
  # CHECK RESULT
  exitValue=0
  if [ "${productivity_ss:0:1}" != "${productivity_print:0:1}" ]; then
     echo "[ERROR] Statefull services are not well treated" | tee -a ${output_file} 
     echo "[GOT] $productivity_ss" | tee -a ${output_file}
     echo "[EXPECTED] $productivity_print" | tee -a ${output_file}
     exitValue=2
  fi
  
  if [ "${productivity_ms:0:1}" != "${productivity_create:0:1}" ]; then
     echo "[ERROR] Dependance between statefull services and methods is not well treated" | tee -a ${output_file} 
     echo "[GOT] $productivity_ms" | tee -a ${output_file}
     echo "[EXPECTED] $productivity_create" | tee -a ${output_file}
     exitValue=3
  fi  
  
  # Report result status
  exit $exitValue
  
