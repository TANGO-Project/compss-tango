#!/bin/bash

  # Obtain parameters
  output_file=$1 
  target_log_folder=$2
  
  # Log files
  runtime_log="${target_log_folder}/runtime.log"

  #----------------------------------------------------------------------------------
  # Check output standard out status
  if [ -f ${output_file} ]; then
     result_expected="------------------------------------------------------------"
     test_result=$(tail -1 ${output_file})
     if [ "${result_expected}" != "${test_result}" ]; then
        echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a ${output_file}
        exit 1
     fi
  else
     echo "SOME ERROR WAS FOUND. CHECK ERRORS ABOVE." | tee -a ${output_file}
     exit 1
  fi
  # Check that ErrorManager has not generated any ERROR or FATAL message.
  if $(cat "${output_file}" "${runtime_log}" | tr '\n' ' ' | grep -E -q "[ERRMGR].*(ERROR|FATAL):.*.*Shutting"); then
    echo "ERROR: ERRMGR RAISED A FATAL ERROR. TEST FAILED." | tee -a ${output_file}
    exit 1
  fi
 
  #------------------------------------------------------------------------------------------------------- 
  #Compute result status
  exitValue=0

  j2_A_expected="A int: 7"
  j2_A_value=$(cat ${target_log_folder}/jobs/job2_NEW.out | grep "A int:")
  j2_B_expected="B string: OPTIMIS"
  j2_B_value=$(cat ${target_log_folder}/jobs/job2_NEW.out | grep "B string:")
  j4_params_expected="17 OPTIMIS-CLOUD 3 -PROJECT"
  j4_params_value=$(cat ${target_log_folder}/jobs/job4_NEW.out | grep "Parameter values: " | cut -c 23-)
  j5_A_expected="A int: 20"
  j5_A_value=$(cat ${target_log_folder}/jobs/job5_NEW.out | grep "A int:")
  j5_B_expected="B string: OVERWRITE"
  j5_B_value=$(cat ${target_log_folder}/jobs/job5_NEW.out | grep "B string:")
  log_A_expected="int: 20"
  log_A_value=$(cat ${output_file} | grep "Updated A" | cut -c 11-)
  log_B_expected="string: OPTIMIS-CLOUD-PROJECT"
  log_B_value=$(cat ${output_file} | grep "Updated B" | cut -c 11-)

  if [ "$j2_A_value" != "$j2_A_expected" ] || [ "$j2_B_value" != "$j2_B_expected" ] || [ "$j4_params_value" != "$j4_params_expected" ] || [ "$j5_A_value" != "$j5_A_expected" ] || [ "$j5_B_value" != "$j5_B_expected" ] || [ "$log_A_value" != "$log_A_expected" ] || [ "$log_B_value" != "$log_B_expected" ]; then
     echo "ERROR ON TEST USER OBJECTS" | tee -a ${output_file}
     exitValue=1
  else
    echo "[RESULT_CHECK] User objects passed" | tee -a ${output_file}
  fi

  #-------------------------------------------------------------------------------------------------------
  j8_types_expected="java.lang.Integer java.lang.String"
  j8_types_value=$(cat ${target_log_folder}/jobs/job8_NEW.out | grep "Parameter types: " | cut -c 22-)
  j8_params_expected="125 SDOSDOSDO"
  j8_params_value=$(cat ${target_log_folder}/jobs/job8_NEW.out | grep "Parameter values: " | cut -c 23-)
  log_A_expected="125"
  log_A_value=$(cat ${output_file} | grep "Integer value:" | cut -c 16-)
  log_B_expected="SDOSDOSDO"
  log_B_value=$(cat ${output_file} | grep "String value:" | cut -c 15-)

  if [ "$j8_types_value" != "$j8_types_expected" ] || [ "$j8_params_value" != "$j8_params_expected" ] || [ "$log_A_value" != "$log_A_expected" ] || [ "$log_B_value" != "$log_B_expected" ]; then
     echo "ERROR ON IMMUTABLE OBJECTS" | tee -a ${output_file}
     exitValue=1
  else
    echo "[RESULT_CHECK] Immutable objects passed" | tee -a ${output_file}
  fi

  #-------------------------------------------------------------------------------------------------------
  log_before_int_expected="32"
  log_before_int_value=$(cat ${output_file} | grep "Integer before:" | cut -c 17-)
  log_before_string_expected="Old value"
  log_before_string_value=$(cat ${output_file} | grep "String before:" | cut -c 16-)
  log_after_int_expected="64, old value was 32"
  log_after_int_value=$(cat ${output_file} | grep "Integer after:" | cut -c 16-)
  log_after_string_expected="New value"
  log_after_string_value=$(cat ${output_file} | grep "String after:" | cut -c 15-)

  if [ "$log_before_int_value" != "$log_before_int_expected" ] || [ "$log_before_string_value" != "$log_before_string_expected" ] || [ "$log_after_int_value" != "$log_after_int_expected" ] || [ "$log_after_string_value" != "$log_after_string_expected" ]; then
     echo "ERROR ON TARGET OBJECTS" | tee -a ${output_file}
     exitValue=1
  else
    echo "[RESULT_CHECK] Target objects passed" | tee -a ${output_file}
  fi

  #-------------------------------------------------------------------------------------------------------
  log_square_4_expected="16"
  log_square_4_value=$(cat ${output_file} | grep "Square of 4" | cut -c 16-)
  log_square_5_expected="25"
  log_square_5_value=$(cat ${output_file} | grep "Square of 5" | cut -c 16-)

  if [ "$log_square_4_value" != "$log_square_4_expected" ] || [ "$log_square_5_value" != "$log_square_5_expected" ]; then
     echo "ERROR ON PRIMITIVE RETURN" | tee -a ${output_file}
     exitValue=1
  else
    echo "[RESULT_CHECK] Primitive return objects passed" | tee -a ${output_file}
  fi

  #-------------------------------------------------------------------------------------------------------
  log_constructor_c_expected="In C constructor, creating C with A 6 and B CONSTRUCTOR TEST"
  log_constructor_c_value=$(cat ${output_file} | grep "In C constructor,")
  log_constructor_app_expected="In app, A is 6 and B is CONSTRUCTOR TEST"
  log_constructor_app_value=$(cat ${output_file} | grep "In app,")

  if [ "$log_constructor_c_value" != "$log_constructor_c_expected" ] || [ "$log_constructor_app_value" != "$log_constructor_app_expected" ]; then
     echo "ERROR ON CONSTRUCTOR" | tee -a ${output_file}
     exitValue=1
  else
    echo "[RESULT_CHECK] Constructor passed" | tee -a ${output_file}
  fi

  #-------------------------------------------------------------------------------------------------------
  log_first_array_before=$(cat ${target_log_folder}/jobs/job17_NEW.out | grep "First array: 9 18 27")
  log_second_array_before=$(cat ${target_log_folder}/jobs/job17_NEW.out | grep "Second array: 11 22")
  log_element1=$(cat ${output_file} | grep "Element in position 1 is 18")
  log_element10=$(cat ${output_file} | grep "Element in position 0,1 is 22")
  log_first_array_after=$(cat ${target_log_folder}/jobs/job18_NEW.out | grep "First array: 9 99 27")
  log_second_array_after=$(cat ${target_log_folder}/jobs/job18_NEW.out | grep "Second array: 11 99")

  if [ -z "$log_first_array_before" ] || [ -z "$log_second_array_before" ]  || [ -z "$log_element1" ] || [ -z "$log_element10" ] || [ -z "$log_first_array_after" ] || [ -z "$log_second_array_after" ]; then
     echo "ERROR ON ARRAYS" | tee -a ${output_file}
     exitValue=1
  else
    echo "[RESULT_CHECK] Arrays passed" | tee -a ${output_file}
  fi

  #-------------------------------------------------------------------------------------------------------
  #Report result status
  exit $exitValue
  
